package me.gamrboy4life.paradox.analysis;

import me.gamrboy4life.paradox.Sotuken;

public class ScanfParser {
public void parseData(String data) {
		
		if(isSetBlockReplace(data)) {
			executeSetBlockReplace(data);
			
		}else if(isSetBlockKeep(data)) {
			executeSetBlockKeep(data);
			
		}else if(isSetBlockDestroy(data)) {
			executeSetBlockDestroy(data);

			
			
			
		}else if(isFillDestroy(data)) {
			executeFillDestroy(data);
			
		}else if(isFillKeep(data)) {
			executeFillKeep(data);
			
		}else if(isFillHollow(data)) {
			executeFillHollow(data);
			
		}else if(isFillOutline(data)) {
			executeFillOutline(data);
			
		}else if(isFillReplace(data)) {
			executeFillReplace(data);
		
		}else if(isFillReplaceBlock(data)) {
			executeFillReplaceBlock(data);
			
			
			
			
		}else if(isCloneReplaceNormal(data)) {
			executeCloneReplaceNormal(data);
			
		}else if(isCloneReplaceForce(data)) {
			executeCloneReplaceForce(data);
			
		}else if(isCloneReplaceMove(data)) {
			executeCloneReplaceMove(data);

			
		}else if(isCloneMaskedNormal(data)) {
			executeCloneMaskedNormal(data);
			
		}else if(isCloneMaskedForce(data)) {
			executeCloneMaskedForce(data);
			
		}else if(isCloneMaskedMove(data)) {
			executeCloneMaskedMove(data);
			
			
		}else if(isCloneFilteredNormal(data)) {
			executeCloneFilteredNormal(data);
			
		}else if(isCloneFilteredForce(data)) {
			executeCloneFilteredForce(data);
			
		}else if(isCloneFilteredMove(data)) {
			executeCloneFilteredMove(data);
			
			
			
		}else if(isSummon(data)) {
			executeSummon(data);
		
			
			
		}else if(isSendCommand(data)) {
			executeSendCommand(data);
			
			
			
		}else if(isTestForBlock(data)) {
			executeTestForBlock(data);
			
			
		}else if(isTestForBlocksAll(data)) {
			executeTestForBlocksAll(data);
			
		}else if(isTestForBlocksMasked(data)) {
			executeTestForBlocksMasked(data);
			
		}else {
			Sotuken.instance.moduleManager.addRunChatMessage(data.toString());
		}
	
	}
}
