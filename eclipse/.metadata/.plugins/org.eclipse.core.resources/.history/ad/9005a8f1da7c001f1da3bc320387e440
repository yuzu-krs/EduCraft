package me.gamrboy4life.paradox.module.status;

import java.util.List;

import org.lwjgl.input.Keyboard;

import me.gamrboy4life.paradox.Sotuken;
import me.gamrboy4life.paradox.module.Category;
import me.gamrboy4life.paradox.module.Module;
import me.gamrboy4life.paradox.utils.Wrapper;
import net.minecraft.client.gui.Gui;

public class TabGui extends Module{
	
	public int currentTab;
	public boolean expanded;

	public TabGui() {
		super("TabGui",0,Category.STATUS);
		toggled=true;
	}
	
	// タイマーを使ってアニメーションを管理
	private long animationStartTime;
	private float tabOffset = 0; // タブの移動位置
	private boolean isAnimating = false;

	public void draw() {
	    if (this.isToggled()) {
	        long currentTime = System.currentTimeMillis();
	        if (!isAnimating) {
	            animationStartTime = currentTime;
	            isAnimating = true;
	        }
	        
	        // アニメーション進行状況 (0から1の間の値)
	        float progress = Math.min(1.0f, (float)(currentTime - animationStartTime) / 500.0f);
	        
	        // イージング関数 (ここでは quadratic ease-out)
	        float easedProgress = 1 - (1 - progress) * (1 - progress);

	        // 背景のフェードイン効果
	        int backgroundAlpha = (int)(0x90 * easedProgress);
	        Gui.drawRect(5, 20, 68, 102, (backgroundAlpha << 24) | 0x000000);

	        // タブのスライド効果
	        int targetY = 23 + currentTab * 13;
	        tabOffset += (targetY - tabOffset) * easedProgress; // 緩やかな移動
	        Gui.drawRect(8, (int)(tabOffset), 7 + 58, (int)(tabOffset + 11), 0xFF006400);

	        int count = 0;

	        for (Category c : Category.values()) {
	            Wrapper.fr.drawString(c.name, 10, 25 + count * 13, -1);
	            count++;
	        }

	        if (expanded) {
	            Category category = Category.values()[currentTab];
	            List<Module> modules = Sotuken.instance.moduleManager.getModulesbyCategory(category);

	            if (modules.size() == 0) {
	                return;
	            }

	            // モジュール名の最大長を取得する
	            int maxLenModule = 0;
	            for (Module module : modules) {
	                int moduleWidth = Wrapper.fr.getStringWidth(module.name);
	                if (moduleWidth > maxLenModule) maxLenModule = moduleWidth;
	            }

	            // モジュールリストのスライドイン効果
	            int listWidth = 48 + maxLenModule + 30;
	            int listX = (int)(68 + easedProgress * (listWidth - 68)); // スライドイン
	            Gui.drawRect(listX, 20, listWidth, 25 + modules.size() * 13, (backgroundAlpha << 24) | 0x000000);

	            // 選択中のモジュールのハイライト
	            Gui.drawRect(listX + 2, 23 + category.moduleIndex * 13, listX + maxLenModule + 12, 34 + category.moduleIndex * 13, 0xFF006400);

	            count = 0;

	            for (Module m : modules) {
	                Wrapper.fr.drawStringWithShadow(m.name, listX + 5, 25 + count * 13, -1);
	                count++;
	            }
	        }
	    }
	}
	
	public void keyPressed(int k) {
		Category category=Category.values()[currentTab];
		List<Module> modules=Sotuken.instance.moduleManager.getModulesbyCategory(category);
		switch(k) {
		
		case Keyboard.KEY_UP:
			if(expanded) {
				if(category.moduleIndex<=0) {
					category.moduleIndex=modules.size()-1;
				}else {
					category.moduleIndex--;
				}
			}else {
				if(currentTab<=0) {
					currentTab=Category.values().length-1;
				}else {
					currentTab--;
				}
				
			}
			break;
			
		case Keyboard.KEY_DOWN:
			if(expanded) {
				if(category.moduleIndex>=modules.size()-1) {
					category.moduleIndex=0;
				}else {
					category.moduleIndex++;
				}
			}else {
				if(currentTab>=Category.values().length-1) {
					currentTab=0;
				}else {
					currentTab++;
				}
			}
			break;
			
		case Keyboard.KEY_RIGHT:
			if(expanded&&modules.size()!=0) {
				Module module=modules.get(category.moduleIndex);
				if(!module.name.equals("TabGui"))
					module.toggle();
			}else {
				if(modules.size()!=0) {
					expanded=true;
					category.moduleIndex=0;
				}
			}
			break;
			
		case Keyboard.KEY_LEFT:
			expanded=false;

			
			
			
			
			
		
		}
		
	}

}