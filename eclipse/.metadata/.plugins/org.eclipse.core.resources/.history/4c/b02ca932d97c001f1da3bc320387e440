package me.gamrboy4life.paradox.module.status;

import java.util.List;

import org.lwjgl.input.Keyboard;

import me.gamrboy4life.paradox.Sotuken;
import me.gamrboy4life.paradox.module.Category;
import me.gamrboy4life.paradox.module.Module;
import me.gamrboy4life.paradox.utils.Wrapper;
import net.minecraft.client.gui.Gui;

public class TabGui extends Module{
	
	public int currentTab;
	public boolean expanded;

	public TabGui() {
		super("TabGui",0,Category.STATUS);
		toggled=true;
	}
	
	// フィールドにアニメーション用の変数を追加
	private float backgroundAlpha = 0.0f; // 背景のアルファ値 (0.0 - 1.0)
	private float highlightAlpha = 0.0f; // ハイライトのアルファ値 (0.0 - 1.0)
	private final float ANIMATION_SPEED = 0.05f; // アニメーションの速さ

	public void draw() {
	    if (this.isToggled()) {
	        // 背景のアルファ値を徐々に変化させる
	        backgroundAlpha = Math.min(1.0f, backgroundAlpha + ANIMATION_SPEED);
	        int backgroundColor = ((int) (backgroundAlpha * 0x90) << 24) | 0x000000; // 透明度を反映

	        // 背景をふわっと表示
	        Gui.drawRect(5, 20, 68, 102, backgroundColor);

	        // ハイライトのアルファ値も徐々に変化
	        highlightAlpha = Math.min(1.0f, highlightAlpha + ANIMATION_SPEED);
	        int highlightColor = ((int) (highlightAlpha * 0xFF) << 24) | 0x006400; // 透明度を反映

	        // 選択中のタブにハイライト
	        Gui.drawRect(8, 23 + currentTab * 13, 7 + 58, 34 + currentTab * 13, highlightColor);

	        int count = 0;

	        // カテゴリの描画
	        for (Category c : Category.values()) {
	            Wrapper.fr.drawString(c.name, 10, 25 + count * 13, -1);
	            count++;
	        }

	        // 展開されている場合
	        if (expanded) {
	            Category category = Category.values()[currentTab];
	            List<Module> modules = Sotuken.instance.moduleManager.getModulesbyCategory(category);

	            if (modules.size() == 0) {
	                return;
	            }

	            // モジュール名の最大幅を計算
	            int maxLenModule = 0;
	            for (Module module : modules) {
	                if (Wrapper.fr.getStringWidth(module.name) > maxLenModule)
	                    maxLenModule = Wrapper.fr.getStringWidth(module.name);
	            }

	            // モジュールリストの背景をふわっと表示
	            Gui.drawRect(68, 20, 48 + maxLenModule + 30, 25 + modules.size() * 13, backgroundColor);
	            Gui.drawRect(70, 23 + category.moduleIndex * 13, 63 + maxLenModule + 12, 34 + category.moduleIndex * 13, highlightColor);

	            count = 0;

	            // モジュール名の描画
	            for (Module m : modules) {
	                Wrapper.fr.drawStringWithShadow(m.name, 73, 25 + count * 13, -1);
	                count++;
	            }
	        }
	    }
	}
	
	public void keyPressed(int k) {
		Category category=Category.values()[currentTab];
		List<Module> modules=Sotuken.instance.moduleManager.getModulesbyCategory(category);
		switch(k) {
		
		case Keyboard.KEY_UP:
			if(expanded) {
				if(category.moduleIndex<=0) {
					category.moduleIndex=modules.size()-1;
				}else {
					category.moduleIndex--;
				}
			}else {
				if(currentTab<=0) {
					currentTab=Category.values().length-1;
				}else {
					currentTab--;
				}
				
			}
			break;
			
		case Keyboard.KEY_DOWN:
			if(expanded) {
				if(category.moduleIndex>=modules.size()-1) {
					category.moduleIndex=0;
				}else {
					category.moduleIndex++;
				}
			}else {
				if(currentTab>=Category.values().length-1) {
					currentTab=0;
				}else {
					currentTab++;
				}
			}
			break;
			
		case Keyboard.KEY_RIGHT:
			if(expanded&&modules.size()!=0) {
				Module module=modules.get(category.moduleIndex);
				if(!module.name.equals("TabGui"))
					module.toggle();
			}else {
				if(modules.size()!=0) {
					expanded=true;
					category.moduleIndex=0;
				}
			}
			break;
			
		case Keyboard.KEY_LEFT:
			expanded=false;

			
			
			
			
			
		
		}
		
	}

}