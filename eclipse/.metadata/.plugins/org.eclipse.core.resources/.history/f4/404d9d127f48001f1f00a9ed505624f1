package me.gamrboy4life.paradox.gui;

import java.awt.Font;
import java.awt.FontFormatException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.UnicodeFont;
import org.newdawn.slick.font.effects.ColorEffect;
import me.gamrboy4life.paradox.Sotuken;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.util.StringUtils;

public class UnicodeFontRenderer {

    public static UnicodeFontRenderer getFontOnPC(String name, int size) {
        return getFontOnPC(name, size, Font.PLAIN);
    }

    public static UnicodeFontRenderer getFontOnPC(String name, int size, int fontType) {
        return getFontOnPC(name, size, fontType, 0);
    }

    public static UnicodeFontRenderer getFontOnPC(String name, int size, int fontType, float kerning) {
        return getFontOnPC(name, size, fontType, kerning, 3.0f);
    }

    public static UnicodeFontRenderer getFontFromAssets(String name, int size) {
        return getFontOnPC(name, size, Font.PLAIN);
    }

    public static UnicodeFontRenderer getFontFromAssets(String name, int size, int fontType) {
        return getFontOnPC(name, size, fontType, 0);
    }

    public static UnicodeFontRenderer getFontFromAssets(String name, int size, float kerning, int fontType) {
        return getFontFromAssets(name, size, fontType, kerning, 3.0f);
    }

    private final int[] colorCodes = new int[32];
    private final float kerning;
    private final Map<String, Float> cachedStringWidth = new HashMap<>();
    private float antiAliasingFactor;
    private UnicodeFont unicodeFont;

    private UnicodeFontRenderer(String fontName, int fontType, float fontSize, float kerning, float antiAliasingFactor) {
        this.antiAliasingFactor = antiAliasingFactor;
        try {
            this.unicodeFont = new UnicodeFont(getFontByName(fontName).deriveFont(fontSize * this.antiAliasingFactor));
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.kerning = kerning;
        this.unicodeFont.addAsciiGlyphs();
        this.unicodeFont.getEffects().add(new ColorEffect(java.awt.Color.WHITE));
        try {
            this.unicodeFont.loadGlyphs();
        } catch (Exception e) {
            e.printStackTrace();
        }
        initializeColorCodes();
    }

    private UnicodeFontRenderer(Font font, float kerning, float antiAliasingFactor) {
        this.antiAliasingFactor = antiAliasingFactor;
        this.unicodeFont = new UnicodeFont(new Font(font.getName(), font.getStyle(), (int) (font.getSize() * antiAliasingFactor)));
        this.kerning = kerning;
        this.unicodeFont.addAsciiGlyphs();
        this.unicodeFont.getEffects().add(new ColorEffect(java.awt.Color.WHITE));
        try {
            this.unicodeFont.loadGlyphs();
        } catch (Exception e) {
            e.printStackTrace();
        }
        initializeColorCodes();
    }

    private void initializeColorCodes() {
        for (int i = 0; i < 32; i++) {
            int shadow = (i >> 3 & 1) * 85;
            int red = (i >> 2 & 1) * 170 + shadow;
            int green = (i >> 1 & 1) * 170 + shadow;
            int blue = (i & 1) * 170 + shadow;
            if (i == 6) {
                red += 85;
            }
            if (i >= 16) {
                red /= 4;
                green /= 4;
                blue /= 4;
            }
            this.colorCodes[i] = (red & 255) << 16 | (green & 255) << 8 | blue & 255;
        }
    }

    public static UnicodeFontRenderer getFontOnPC(String fontName, int fontSize, int fontType, float kerning, float antiAliasingFactor) {
        Font awtFont;
        try {
            awtFont = getFontByName(fontName).deriveFont((float) fontType, fontSize);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return new UnicodeFontRenderer(awtFont, kerning, antiAliasingFactor);
    }

    private static Font getFontByName(String fontName) {
        Font font;
        try {
            font = Font.createFont(Font.TRUETYPE_FONT, Sotuken.class.getResourceAsStream("/assets/yuzuclient/font/" + fontName + ".ttf"));
        } catch (FontFormatException | IOException e) {
            throw new RuntimeException(e);
        }
        return font;
    }

    public void drawString(String text, float x, float y, int color) {
        if (text == null) return;

        x *= this.antiAliasingFactor;
        y = (y - 3.0F) * this.antiAliasingFactor;

        GL11.glPushMatrix();
        GlStateManager.scale(1.0F / this.antiAliasingFactor, 1.0F / this.antiAliasingFactor, 1.0F / this.antiAliasingFactor);

        boolean blend = GL11.glGetBoolean(GL11.GL_BLEND);
        boolean lighting = GL11.glGetBoolean(GL11.GL_LIGHTING);
        boolean texture = GL11.glGetBoolean(GL11.GL_TEXTURE_2D);

        if (!blend) {
            GL11.glEnable(GL11.GL_BLEND);
        }
        if (lighting) {
            GL11.glDisable(GL11.GL_LIGHTING);
        }
        if (texture) {
            GL11.glEnable(GL11.GL_TEXTURE_2D);
        }

        this.unicodeFont.drawString(x, y, text, new org.newdawn.slick.Color(color));

        if (texture) {
            GL11.glEnable(GL11.GL_TEXTURE_2D);
        }
        if (!blend) {
            GL11.glDisable(GL11.GL_BLEND);
        }
        if (lighting) {
            GL11.glEnable(GL11.GL_LIGHTING);
        }

        GL11.glPopMatrix();
    }

    public int getStringWidth(String text) {
        if (this.cachedStringWidth.containsKey(text)) {
            return this.cachedStringWidth.get(text).intValue();
        }
        if (StringUtils.isNullOrEmpty(text)) {
            return 0;
        }
        float width = (float) this.unicodeFont.getWidth(text) / this.antiAliasingFactor + this.kerning;
        this.cachedStringWidth.put(text, width);
        return (int) width;
    }

    public int getStringHeight(String text) {
        return (int) (this.unicodeFont.getHeight(text) / this.antiAliasingFactor);
    }

    public void drawCenteredString(String text, float x, float y, int color) {
        drawString(text, x - getStringWidth(text) / 2, y, color);
    }

    public void drawRightString(String text, float x, float y, int color) {
        drawString(text, x - getStringWidth(text), y, color);
    }
}